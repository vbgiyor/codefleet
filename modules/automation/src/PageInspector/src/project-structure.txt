PageInspector/
├── pom.xml
├── testng.xml
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── herokuapp/
│   │   │       └── modules/
│   │   │           ├── config/
│   │   │           │   └── ConfigReader.java
│   │   │           ├── pages/
│   │   │           │   ├── BasePage.java
│   │   │           │   ├── HomePage.java
│   │   │           │   └── LoginPage.java
│   │   │           ├── core/
│   │   │           │   ├── CoreActions.java
│   │   │           │   └── WebDriverFactory.java
│   │   │           └── utils/
│   │   │               ├── LoggerUtil.java
│   │   │               ├── ScreenshotUtil.java
│   │   │               └── WaitUtil.java
│   │   └── resources/
│   │       └── config.properties
│   └── test/
│       ├── java/
│       │   └── herokuapp/
│       │       └── modules/
│       │           ├── tests/
│       │           │   ├── BaseTest.java
│       │           │   ├── HomePageTest.java
│       │           │   └── LoginTest.java
│       └── resources/
│           └── logback.xml
└── target/
    └── screenshots

Explanation of Components
pom.xml: Maven configuration with dependencies (Selenium, TestNG, Logback, etc.).
testng.xml: TestNG suite configuration to run tests.
src/main/java/com/example/:
config/: Handles configuration loading (e.g., config.properties for URLs, timeouts).
pages/: Page Object Model classes for each webpage, with a BasePage for shared functionality.
core/: Core actions (interface) and WebDriver setup.
utils/: Utility classes for logging, screenshots, and waits.
src/main/resources/: Configuration files (e.g., config.properties).
src/test/java/com/example/tests/: Test classes with a BaseTest for setup/teardown.
src/test/resources/: Logging configuration (e.g., logback.xml).
OOP Implementation
Encapsulation:
Page classes (HomePage, LoginPage) encapsulate locators and actions, exposing only public methods (e.g., login(), clickLink()).
Utility classes (LoggerUtil, ScreenshotUtil) encapsulate implementation details (e.g., logging setup, screenshot logic).
Inheritance:
BasePage is extended by all page classes to inherit common WebDriver actions (e.g., click(), type()).
BaseTest is extended by all test classes for shared setup/teardown (e.g., WebDriver initialization).
Polymorphism:
CoreActions interface allows page classes to implement actions differently (e.g., click() can vary by page).
Test classes override setup methods in BaseTest for specific test requirements.
Abstraction:
CoreActions interface abstracts core Selenium actions (click, type, etc.).
BasePage and BaseTest abstract common functionality, hiding WebDriver initialization and cleanup details.