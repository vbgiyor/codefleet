name: Django CI
description: |
  This workflow runs Django tests for the Bookslibrary and Djangocommerce projects using Docker Compose.
  It includes linting, building, and testing steps, with caching for Docker layers.
  PostgreSQL is used as the database service, and test logs are uploaded on failure.
  The workflow is triggered on pushes and pull requests to the main branch, as well as manually via workflow dispatch.
  The workflow runs on the latest Ubuntu environment and uses Docker Compose to manage services.
  The workflow uploads test logs as artifacts, with retention set to 7 days.
  The workflow runs migrations before executing the tests to ensure the database schema is up to date.
  The workflow uses a matrix strategy to run tests for multiple projects and services.
  The workflow sets the `SERVICE_TYPE` and `DATABASE_URL` environment variables for each service to configure the database connection.
  The workflow uses the `docker-compose` command to manage the lifecycle of the services, including building, starting, and stopping them.
  The workflow uses the `--max-line-length` option for flake8 to customize the maximum line length for linting, excluding migration files.
  The workflow uses the `--exclude` option for flake8 to exclude migration files from linting, ensuring that only relevant code is checked.
  The workflow uses the `--volumes` option for `docker-compose down` to remove named volumes, ensuring a clean state for each run.
  The workflow uses the `--build` option for `docker-compose up` to rebuild the images if there are changes, ensuring that the latest code is used.
  The workflow uses the `-d` option for `docker-compose up` to run the services in detached mode, allowing the tests to run in the background.
on:
  push:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  pull_request:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  workflow_dispatch:

jobs:
  test-django:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [bookslibrary, djangocommerce]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: codefleet_${{ matrix.project }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/django-framework/requirements/base.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/django-framework/requirements/base.txt
          pip install flake8 pytest pytest-django

      - name: Run linting
        run: |
          flake8 python/django-framework/apps python/django-framework/core --max-line-length=120 --exclude=migrations

      - name: Run Django tests
        env:
          SERVICE_TYPE: ${{ matrix.project }}
          DATABASE_URL: postgres://user:password@localhost:5432/codefleet_${{ matrix.project }}
        run: |
          if [ "${{ matrix.project }}" = "bookslibrary" ]; then
            cd python/django-framework
            docker-compose down --volumes
            docker-compose up --build -d
            docker-compose exec -T web python apps/bookslibrary/manage.py makemigrations bookstore --settings=core.settings.base
            docker-compose exec -T web python apps/bookslibrary/manage.py migrate --settings=core.settings.base
            pytest apps/bookslibrary/bookstore/tests.py --ds=core.settings.base
            docker-compose down
          elif [ "${{ matrix.project }}" = "djangocommerce" ]; then
            cd python/django-framework/apps/djangocommerce
            docker-compose down --volumes
            docker-compose up --build -d
            docker-compose exec -T order_service python apps/djangocommerce/manage.py makemigrations orders --settings=core.settings.base
            docker-compose exec -T order_service python apps/djangocommerce/manage.py makemigrations users --settings=core.settings.base
            docker-compose exec -T order_service python apps/djangocommerce/manage.py migrate --settings=core.settings.base
            docker-compose exec -T user_service python apps/djangocommerce/manage.py makemigrations users --settings=core.settings.base
            docker-compose exec -T user_service python apps/django-framework/apps/djangocommerce/manage.py migrate --settings=core.settings.base
            pytest apps/djangocommerce/orders/tests.py apps/djangocommerce/users/tests.py --ds=core.settings.base
            docker-compose down
          fi

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: django-${{ matrix.project }}-test-reports
          path: python/django-framework/pytest-reports/
          retention-days: 7