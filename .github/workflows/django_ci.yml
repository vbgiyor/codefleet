name: Django CI
description: |
  Runs Django tests for Bookslibrary and Djangocommerce projects using Docker Compose.
  Triggered on pushes and pull requests to the main branch, and manually via workflow dispatch.
  Uploads test logs as artifacts with 7-day retention.
  Uses a matrix strategy for multiple projects.
  Sets SERVICE_TYPE and DATABASE_URL for database configuration.
  Manages service lifecycle with docker-compose, ensuring clean state via --volumes.
on:
  push:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  pull_request:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  workflow_dispatch:

jobs:
  test-django:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [bookslibrary, djangocommerce]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: codefleet_${{ matrix.project }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean and debug project structure
        run: |
          echo "Project structure:"
          find python/django-framework -type d -o -type f -not -path "*venv*" | sort
          echo "Python path in CI:"
          docker run --rm python:3.9-slim python -c "import sys; print('\n'.join(sys.path))"
          echo "Checking for stray bookstore modules..."
          find python/django-framework -name "bookstore" -type d -not -path "*apps/bookslibrary/bookstore*" -not -path "*venv*" -o -name "bookstore.py" -not -path "*venv*" | tee stray_bookstore.txt
          if [ -s stray_bookstore.txt ]; then
            echo "Found stray bookstore modules, removing..."
            cat stray_bookstore.txt | xargs -I {} rm -rf "{}"
          else
            echo "No stray bookstore modules found"
          fi
          rm -f stray_bookstore.txt
          echo "Removing __pycache__ directories..."
          find python/django-framework -name "__pycache__" -type d -not -path "*venv*" -exec rm -rf {} +
          echo "Post-cleanup structure:"
          find python/django-framework -type d -o -type f -not -path "*venv*" | sort

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/django-framework/requirements/base.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/django-framework/requirements/base.txt
          pip install flake8 pytest pytest-django

      - name: Run linting
        run: |
          flake8 python/django-framework/apps python/django-framework/core --max-line-length=120 --exclude=migrations

      - name: Run Django tests
        env:
          SERVICE_TYPE: ${{ matrix.project }}
          DATABASE_URL: postgres://user:password@postgres:5432/codefleet_${{ matrix.project }}
          PYTHONPATH: /app
        run: |
          if [ "${{ matrix.project }}" = "bookslibrary" ]; then
            cd python/django-framework
            docker-compose down --volumes
            docker-compose up --build -d
            for i in {1..30}; do
              if docker-compose ps | grep postgres | grep "Up.*(healthy)"; then
                echo "Database is healthy"
                break
              fi
              echo "Waiting for database to be healthy..."
              sleep 2
            done
            docker-compose exec -T web python apps/bookslibrary/manage.py makemigrations bookstore --settings=core.settings.base
            docker-compose exec -T web python apps/bookslibrary/manage.py migrate --settings=core.settings.base
            docker-compose exec -T web pytest apps/bookslibrary/bookstore/tests.py --ds=core.settings.base --showlocals
            docker-compose down
          elif [ "${{ matrix.project }}" = "djangocommerce" ]; then
            cd python/django-framework/apps/djangocommerce
            docker-compose down --volumes
            docker-compose up --build -d
            for i in {1..30}; do
              if docker-compose ps | grep postgres | grep "Up.*(healthy)"; then
                echo "Database is healthy"
                break
              fi
              echo "Waiting for database to be healthy..."
              sleep 2
            done
            docker-compose exec -T order_service python manage.py makemigrations orders --settings=core.settings.base
            docker-compose exec -T order_service python manage.py makemigrations users --settings=core.settings.base
            docker-compose exec -T order_service python manage.py migrate --settings=core.settings.base
            docker-compose exec -T order_service pytest tests --ds=core.settings.base
            docker-compose down
          fi

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.project }}
          path: python/django-framework/*.log
          retention-days: 7