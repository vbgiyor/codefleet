name: Django CI
description: |
  Runs Django tests for Bookslibrary and Djangocommerce projects using Docker Compose.
  Triggered on pushes and pull requests to the main branch, and manually via workflow dispatch.
  Uploads test logs as artifacts with 7-day retention.
  Uses a matrix strategy for multiple projects.
  Sets SERVICE_TYPE and DATABASE_URL for database configuration.
  Manages service lifecycle with docker-compose, ensuring clean state via --volumes.
on:
  push:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  pull_request:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  workflow_dispatch:

jobs:
  test-django:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [bookslibrary, djangocommerce]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set working directory
        run: |
          cd python/django-framework
          pwd
          ls -la

      - name: Verify requirements file
        run: |
          cd python/django-framework
          if [ -f requirements/base.txt ]; then
            echo "Found requirements/base.txt"
            cat requirements/base.txt
          else
            echo "Error: requirements/base.txt not found"
            exit 1
          fi

      - name: Clean and debug project structure
        run: |
          cd python/django-framework
          echo "Project structure:"
          find . -type d -o -type f -not -path "*venv*" | sort
          echo "Python path in CI:"
          docker run --rm python:3.9-slim python -c "import sys; print('\n'.join(sys.path))"
          echo "Checking for stray bookstore modules in project..."
          find . -name "bookstore" -type d -not -path "*apps/bookslibrary/bookstore*" -not -path "*venv*" -o -name "bookstore.py" -not -path "*venv*" | tee stray_bookstore.txt
          if [ -s stray_bookstore.txt ]; then
            echo "Found stray bookstore modules, removing..."
            cat stray_bookstore.txt | xargs -I {} rm -rf "{}"
          else
            echo "No bookstore modules found in project"
          fi
          rm -f stray_bookstore.txt
          echo "Removing __pycache__ directories..."
          find . -name "__pycache__" -type d -not -path "*venv*" -exec rm -rf {} +
          echo "Checking for bookstore in site-packages in Docker..."
          docker run --rm python:3.9-slim sh -c "find /usr/local/lib/python3.9/site-packages -name 'bookstore*' -type f -o -type d | tee /tmp/stray_bookstore.txt && if [ -s /tmp/stray_bookstore.txt ]; then cat /tmp/stray_bookstore.txt | xargs -I {} rm -rf '{}'; echo 'Removed stray bookstore modules from site-packages'; else echo 'No bookstore modules in site-packages'; fi"
          echo "Verifying site-packages after cleanup..."
          docker run --rm python:3.9-slim sh -c "find /usr/local/lib/python3.9/site-packages -name 'bookstore*' -type f -o -type d || echo 'No bookstore modules found in site-packages'"
          echo "Post-cleanup structure:"
          find . -type d -o -type f -not -path "*venv*" | sort

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Clean up existing containers
        run: |
          cd python/django-framework
          echo "Checking for containers using port 5432..."
          docker ps -a --filter "publish=5432" --format "{{.ID}} {{.Names}} {{.Ports}}" || echo "No containers found using port 5432"
          echo "Stopping and removing all containers..."
          docker-compose down --volumes || true
          docker ps -a -q | xargs -r docker rm -f || true
          echo "Verifying no containers are using port 5432..."
          docker ps -a --filter "publish=5432" --format "{{.ID}} {{.Names}} {{.Ports}}" || echo "No containers using port 5432"

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/django-framework/requirements/base.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd python/django-framework
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install flake8 pytest pytest-django

      - name: Run linting
        run: |
          cd python/django-framework
          flake8 apps core --max-line-length=120 --exclude=migrations

      - name: Run Django tests
        env:
          SERVICE_TYPE: ${{ matrix.project }}
          DATABASE_URL: postgres://user:password@db:5432/codefleet_${{ matrix.project }}
          PYTHONPATH: /github/workspace/python/django-framework
        run: |
          if [ "${{ matrix.project }}" = "bookslibrary" ]; then
            cd python/django-framework
            docker-compose down --volumes
            docker-compose up --build -d
            for i in {1..30}; do
              if docker-compose ps | grep db | grep "Up.*(healthy)"; then
                echo "Database is healthy"
                break
              fi
              echo "Waiting for database to be healthy..."
              sleep 2
            done
            docker-compose exec -T web python apps/bookslibrary/manage.py makemigrations bookstore --settings=core.settings.base
            docker-compose exec -T web python apps/bookslibrary/manage.py migrate --settings=core.settings.base
            docker-compose exec -T web pytest apps/bookslibrary/bookstore/tests.py --ds=core.settings.base --showlocals
            docker-compose down
          elif [ "${{ matrix.project }}" = "djangocommerce" ]; then
            cd python/django-framework/apps/djangocommerce
            docker-compose down --volumes
            docker-compose up --build -d
            for i in {1..30}; do
              if docker-compose ps | grep postgres | grep "Up.*(healthy)"; then
                echo "Database is healthy"
                break
              fi
              echo "Waiting for database to be healthy..."
              sleep 2
            done
            docker-compose exec -T order_service python manage.py makemigrations orders --settings=core.settings.base
            docker-compose exec -T order_service python manage.py makemigrations users --settings=core.settings.base
            docker-compose exec -T order_service python manage.py migrate --settings=core.settings.base
            docker-compose exec -T order_service pytest tests --ds=core.settings.base
            docker-compose down
          fi

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.project }}
          path: 'python/django-framework/*.log'
          retention-days: 7