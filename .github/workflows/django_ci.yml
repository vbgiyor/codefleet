name: Django CI

on:
  push:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  pull_request:
    branches: [main]
    paths:
      - 'python/django-framework/**'
  workflow_dispatch:

jobs:
  test-django:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - project: bookslibrary
            app: bookstore
            service: web
            working_dir: python/django-framework
            service_type: bookslibrary
            db_name: codefleet_bookslibrary
          - project: djangocommerce
            app: orders
            service: order_service
            working_dir: python/django-framework/apps/djangocommerce
            service_type: djangocommerce
            db_name: codefleet_djangocommerce
          - project: djangocommerce
            app: users
            service: user_service
            working_dir: python/django-framework/apps/djangocommerce
            service_type: djangocommerce
            db_name: codefleet_djangocommerce

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ${{ matrix.db_name }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Run linting
        working-directory: python/django-framework
        run: |
          pip install flake8
          flake8 apps core --max-line-length=120 --exclude=migrations      

      - name: Build and start services
        working-directory: ${{ matrix.working_dir }}
        env:
          SERVICE_TYPE: ${{ matrix.service_type }}
          DATABASE_URL: postgres://user:password@localhost:5432/${{ matrix.db_name }}
        run: |
          docker-compose down --volumes
          docker-compose up --build -d

      - name: Run migrations
        working-directory: ${{ matrix.working_dir }}
        env:
          SERVICE_TYPE: ${{ matrix.service_type }}
          DATABASE_URL: postgres://user:password@localhost:5432/${{ matrix.db_name }}
        run: |
          docker-compose exec -T ${{ matrix.service }} python apps/${{ matrix.project }}/manage.py makemigrations ${{ matrix.app }} --settings=core.settings.base
          docker-compose exec -T ${{ matrix.service }} python apps/${{ matrix.project }}/manage.py migrate --settings=core.settings.base

      - name: Run Django tests
        working-directory: ${{ matrix.working_dir }}
        env:
          SERVICE_TYPE: ${{ matrix.service_type }}
          DATABASE_URL: postgres://user:password@localhost:5432/${{ matrix.db_name }}
        run: |
          docker-compose exec -T ${{ matrix.service }} python apps/${{ matrix.project }}/manage.py test apps.${{ matrix.project }}.${{ matrix.app }} --settings=core.settings.base

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: django-${{ matrix.project }}-${{ matrix.app }}-test-logs
          path: ${{ matrix.working_dir }}/*.log
          retention-days: 7

      - name: Stop services
        working-directory: ${{ matrix.working_dir }}
        run: |
          docker-compose down --volumes