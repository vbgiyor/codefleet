name: Website CI

on:
  push:
    branches: [main]
    paths:
      - 'website/**'
  pull_request:
    branches: [main]
    paths:
      - 'website/**'
  workflow_dispatch:

jobs:
  backend:
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service for Django
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: codefleet_db
          POSTGRES_USER: codefleet_user
          POSTGRES_PASSWORD: codefleet_pass
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      # Redis service for Django
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 3: Cache Python dependencies
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('website/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install backend dependencies
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r website/backend/requirements.txt

    # Step 5: Set up Node.js for frontend build
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Step 6: Cache Node.js dependencies
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: website/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('website/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 7: Install frontend dependencies
    - name: Install frontend dependencies
      working-directory: ./website/frontend
      run: npm install

    # Step 8: Build React app
    - name: Build React app
      working-directory: ./website/frontend
      run: npm run build

    # Step 9: Copy React build to backend
    - name: Copy React build to backend
      run: |
        mkdir -p website/backend/frontend/build
        cp -r website/frontend/build/* website/backend/frontend/build/

    # Step 10: Apply migrations
    - name: Apply migrations
      working-directory: ./website/backend
      env:
        DATABASE_URL: postgresql://codefleet_user:codefleet_pass@postgres:5432/codefleet_db
      run: |
        python manage.py migrate

    # Step 11: Run Django tests
    - name: Run Django tests
      working-directory: ./website/backend
      env:
        DATABASE_URL: postgresql://codefleet_user:codefleet_pass@postgres:5432/codefleet_db
        CI: true
      run: |
        python manage.py test

  frontend:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Step 3: Cache Node.js dependencies
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: website/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('website/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Install frontend dependencies
    - name: Install frontend dependencies
      working-directory: ./website/frontend
      run: npm install

    # Step 5: Run React tests
    - name: Run React tests
      working-directory: ./website/frontend
      run: npm test -- --watchAll=false

    # Step 6: Build React app
    - name: Build React app
      working-directory: ./website/frontend
      run: npm run build

  collect-static:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 3: Cache Python dependencies
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('website/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install backend dependencies
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r website/backend/requirements.txt

    # Step 5: Copy React build to backend
    - name: Copy React build to backend
      run: |
        mkdir -p website/backend/frontend/build
        cp -r website/frontend/build/* website/backend/frontend/build/

    # Step 6: Collect static files
    - name: Collect static files
      working-directory: ./website/backend
      run: |
        python manage.py collectstatic --noinput

    # Step 7: Debug static files directory
    - name: List static files
      working-directory: ./website/backend
      run: |
        ls -la staticfiles/

    # Step 8: Archive build artifacts
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: static-files
        path: website/backend/staticfiles/