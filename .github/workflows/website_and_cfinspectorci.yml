name: Website and CFInspector CI
description: |
  This workflow builds the Codefleet website (backend and frontend) and runs Selenium tests for the CFInspector project.
  It triggers on pushes and pull requests to the main branch for changes in the website or CFInspector directories,
  as well as manually via workflow dispatch. The workflow runs on the latest Ubuntu environment, sets up PostgreSQL
  and Redis services, builds the Django backend and React frontend, and executes Selenium tests for CFInspector.

on:
  push:
    branches: [main]
    paths:
      - 'website/**'
      - 'automation/ui/selenium/java/cfinspector/**'
  pull_request:
    branches: [main]
    paths:
      - 'website/**'
      - 'automation/ui/selenium/java/cfinspector/**'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service for Django
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: codefleet_db
          POSTGRES_USER: codefleet_user
          POSTGRES_PASSWORD: codefleet_pass
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      # Redis service for Django
      redis:
        image: redis:latest
        ports:
          - 6379:6379

      # Django backend service
      django:
        image: python:3.11-slim
        env:
          DATABASE_URL: postgresql://codefleet_user:codefleet_pass@postgres:5432/codefleet_db
        ports:
          - 8000:8000
        volumes:
          - .:/app
        command: >
          bash -c "
            pip install -r /app/website/backend/requirements.txt &&
            cd /app/website/backend &&
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:8000
          "
        options: --health-cmd "curl -f http://localhost:8000 || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for path filtering

      # Step 2: Determine changed files
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            website/**
            automation/ui/selenium/java/cfinspector/**

      # Step 3: Debug changed files output
      - name: Debug changed files
        run: |
          echo "Any changed: ${{ steps.changed-files.outputs.any_changed }}"
          echo "All changed files: ${{ steps.changed-files.outputs.all_changed_files }}"

      # Step 4: Set up Python
      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 5: Cache Python dependencies
      - name: Cache Python dependencies
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('website/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 6: Install backend dependencies
      - name: Install backend dependencies
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          python -m pip install --upgrade pip
          pip install -r website/backend/requirements.txt

      # Step 7: Set up Node.js for frontend build
      - name: Set up Node.js
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 8: Cache Node.js dependencies
      - name: Cache Node.js dependencies
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/cache@v4
        with:
          path: website/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('website/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 9: Install frontend dependencies
      - name: Install frontend dependencies
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: ./website/frontend
        run: npm install

      # Step 10: Build React app
      - name: Build React app
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: ./website/frontend
        run: npm run build

      # Step 11: Collect static files
      - name: Collect static files
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: ./website/backend
        run: |
          python manage.py collectstatic --noinput

      # Step 12: Verify Maven project for CFInspector
      - name: Verify Maven project for CFInspector
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: automation/ui/selenium/java/cfinspector
        run: |
          echo "Listing pom.xml files:"
          ls -la pom.xml
          if [ -f pom.xml ]; then
            echo "Found pom.xml in automation/ui/selenium/java/cfinspector"
          else
            echo "No pom.xml found in automation/ui/selenium/java/cfinspector" >&2
            exit 1
          fi
          echo "Listing testng.xml:"
          ls -la testng.xml
          echo "Contents of testng.xml:"
          cat testng.xml

      # Step 13: Run linting for CFInspector
      - name: Run linting for CFInspector
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: automation/ui/selenium/java/cfinspector
        run: |
          mvn checkstyle:check -Dcheckstyle.config.location=checkstyle.xml
        env:
          MAVEN_OPTS: -Xmx512m

      # Step 14: Set up JDK 17
      - name: Set up JDK 17
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.11'
          distribution: 'temurin'
          check-latest: true

      # Step 15: Debug Java setup
      - name: Debug Java setup
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          java -version
          echo "JAVA_HOME: $JAVA_HOME"

      # Step 16: Cache Maven dependencies for CFInspector
      - name: Cache Maven dependencies for CFInspector
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-cfinspector-${{ hashFiles('automation/ui/selenium/java/cfinspector/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-cfinspector-

      # Step 17: Install Chrome and ChromeDriver
      - name: Install Chrome and ChromeDriver
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      # Step 18: Debug Chrome and ChromeDriver
      - name: Debug Chrome and ChromeDriver
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          google-chrome --version || echo "Chrome not found"
          chromedriver --version || echo "ChromeDriver not found"

      # Step 19: Create logback-test.xml to suppress verbose logs
      - name: Create logback-test.xml
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: automation/ui/selenium/java/cfinspector
        run: |
          cat << 'EOF' > logback-test.xml
          <configuration>
              <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                  <encoder>
                      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                  </encoder>
              </appender>
              <logger name="org.apache.hc.client5.http.wire" level="INFO" />
              <root level="INFO">
                  <appender-ref ref="STDOUT" />
              </root>
          </configuration>
          EOF

      # Step 20: Build and test CFInspector
      - name: Build and test CFInspector
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: automation/ui/selenium/java/cfinspector
        run: mvn clean test -Dtestng.xml=testng.xml -Dlogback.configurationFile=logback-test.xml
        env:
          BROWSER: chrome
          HEADLESS: true
          BASE_URL: http://django:8000

      # Step 21: Upload TestNG reports
      - name: Upload TestNG reports
        if: always() && (steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-artifact@v4
        with:
          name: selenium-cfinspector-testng-reports
          path: automation/ui/selenium/java/cfinspector/target/surefire-reports/
          retention-days: 7

      # Step 22: Upload screenshots
      - name: Upload screenshots
        if: failure() && (steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-artifact@v4
        with:
          name: selenium-cfinspector-screenshots
          path: automation/ui/selenium/java/cfinspector/target/screenshots/
          retention-days: 7