{
	"info": {
		"_postman_id": "3d47f8f2-b8c8-4354-a02b-ce5c0cade4f0",
		"name": "django-bookslibrary",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Add Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8fa4dbb-1462-4f78-b21e-2aa5cdcc407e",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "be504324-653c-423d-a08e-1e58576b7bfe",
						"exec": [
							"const moment = require('moment');",
							"const dash = require('lodash');",
							"pm.globals.set(\"today\", moment().format(\"YYYY-MM-DD\"));",
							"pm.globals.set(\"random_number\", dash.random(100, 999));",
							"pm.globals.set(\"isbn\", new Date().getTime());",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6c708908-61a7-417c-b74f-ad42c2d1cc76",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{$randomLoremWords}}\",\n    \"author\": \"{{$randomFirstName}}{{$randomLastName}}\",\n    \"published_date\": \"{{today}}\",\n    \"isbn\": \"{{isbn}}\",\n    \"price\": \"{{$randomInt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}books/",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3bc888e-b036-4c7a-9bbe-f437cf294b55",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "21951335-709e-4dac-bc10-359f3804d45c",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}books/",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e36d86c-3ae7-4f68-8a8a-43fa0c717e60",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e82a89e2-d01f-415b-bec9-200e22f2568b",
						"exec": [
							"pm.globals.set(\"isbn\", new Date().getTime());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "dd1b23d8-e9d5-4450-8ff2-ce0285a21d11",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Book_Update_{{$randomLoremWords}}\",\n    \"author\": \"{{$randomFirstName}}{{$randomLastName}}\",\n    \"published_date\": \"{{today}}\",\n    \"isbn\": \"{{isbn}}\",\n    \"price\": \"{{$randomInt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}books/12/",
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35b6930c-403a-44fc-a70d-cc6b0d400622",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0184ad55-c238-47d1-9632-a5c9df8254c2",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}book/remove/5/",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	]
}